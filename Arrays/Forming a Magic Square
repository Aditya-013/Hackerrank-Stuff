#include <bits/stdc++.h>
#include <cstdlib>
using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'formingMagicSquare' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts 2D_INTEGER_ARRAY s as parameter.
 */

int formingMagicSquare(vector<vector<int>> s) {
    int arr[3][3] = {{4,3,8},{9,5,1},{2,7,6}};
    int t[8][3][3];
    int temp;
    int n =3;
    int k = 0;
    int val = 0;
    while(k != 8){

        /* ###############################  */
        if(k%2==0 && k!= 8){
            for(int i=0; i<3; i++){
                for(int j=0; j<3; j++){
                    t[val][i][j] = arr[i][j];
                }
            }
            val++;
        }

        temp = arr[0][0];
        for(int i=0; i<n-1; i++){
            arr[0][i] = arr[0][i+1];
        }
        for(int i=0; i<n-1; i++){
            arr[i][2] = arr[i+1][2];
        }
        for(int i=n-1; i>0; i--){
            arr[2][i] = arr[2][i-1];
        }
        for(int i=n-1; i>1; i--){
            arr[i][0] = arr[i-1][0];
        }
        arr[1][0] = temp;  
        k++;   
    }

    //Swap to make the first mirror image
    for(int i=0; i<3; i++){
        temp = arr[i][0];
        arr[i][0] = arr[i][2];
        arr[i][2] = temp;
    }
    k = 0;
    while(k != 8){

        /* ###############################  */
        if(k%2==0 && k!= 8){
            for(int i=0; i<3; i++){
                for(int j=0; j<3; j++){
                    t[val][i][j] = arr[i][j];
                }
            }
            val++;
        }
        /* ###############################  */
        temp = arr[0][0];
        for(int i=0; i<n-1; i++){
            arr[0][i] = arr[0][i+1];
        }
        for(int i=0; i<n-1; i++){
            arr[i][2] = arr[i+1][2];
        }
        for(int i=n-1; i>0; i--){
            arr[2][i] = arr[2][i-1];
        }
        for(int i=n-1; i>1; i--){
            arr[i][0] = arr[i-1][0];
        }
        arr[1][0] = temp;  
        k++;   
    }
    int sum1 = 0;
    int test;
    int diff = INT_MAX;
    for(int k=0; k<8; k++){
        sum1 = 0;
        for(int i=0; i<3; i++){
            for(int j=0; j<3; j++){
                sum1 += abs(t[k][i][j] - s[i][j]);
            }
        }
        if(sum1 < diff){
            diff = sum1;
        }
    }
    
    return diff;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    vector<vector<int>> s(3);

    for (int i = 0; i < 3; i++) {
        s[i].resize(3);

        string s_row_temp_temp;
        getline(cin, s_row_temp_temp);

        vector<string> s_row_temp = split(rtrim(s_row_temp_temp));

        for (int j = 0; j < 3; j++) {
            int s_row_item = stoi(s_row_temp[j]);

            s[i][j] = s_row_item;
        }
    }

    int result = formingMagicSquare(s);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
